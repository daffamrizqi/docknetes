Container are ephemerous and stateles:
- You usually don't store data in containers
- Non-persistent data:
  - Locally on writable layer
  - It's the default, just write to the filesystem
  - When containers are destroyed, the data will be gone as well
- Persistent data:
  - Stored outside the container in a volume
  - A volume is mapped to a logical folder


VOLUMES

About volumes:
- Docker volumes are way to persist data generated by and used by Docker containers
- Normally, when you create a docker container, the data and files that are generated inside the 
  container are stored in a temporary file system. If the container is deleted or recreated, this data is lost
- With docker volumes, you can store this data outside of the container's file system, on the host file system.
- This means that even if the container is deleted or recreated, the data stored in the volume remains intact
- In other words, volumes allow you to share data between the host and the container and preserve this data even if
  the container is deleted

Volumes cheat sheet:
- Docker create volume [volumeName] == Creates new volume
- docker volume ls == lists the Volumes
- docker volume inspect [volumeName] == displays the volume info
- docker volume rm [volumeName] == deletes a volume
- docker volume prune == Deletes all volumes not mounted

Commands if want to try make volume and mount it to container:
1. docker volume create myvol:
   - create a docker volume (obviously)
1. docker run -d --name voltest -v myvol:/app nginx:latest:
  - docker run -d == run a container from an image in the backgrounf, as a daemon process
  - --name voltest == --name allows you to specify a custom name for the container, in this case voltest
  - -v myvol:/app == 'v maps a volume to the container. The volume named myvol will be mounted
                      to the "/app" directory inside the container
  - nginx:latest == This is the image that the container will be based on, In this case, its 
                    the latest version of the Nginx image 
  
What is daemon process?
- A daemon is a type of program that runs in the background on a computer, rather that foreground
  where you can see it
- Think of Daemon as a background worker that helps other programs by performing certain tasks
- For example, a web server often has a daemon that listens for incoming connections and serves
  web page to clients
- A daemon might also be responsible for logging system events, checking for software updates,
  or performing other tasks that need to run continuously
-In the context of the Docker command you provided, the -d option is used to run the 
 Nginx container as a daemon process, which means it will run in the background and 
 not take up the terminal or command line interface. This is useful when you want to run a 
 container and continue using the terminal or command line interface for other tasks.